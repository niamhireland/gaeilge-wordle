{"ast":null,"code":"var _jsxFileName = \"/Users/niamhwalsh/Documents/GitHub/gaeilge-wordle/src/App.js\",\n  _s = $RefreshSig$();\nimport './index.css';\nimport React, { useState, useEffect, useRef } from 'react';\nimport GameBoard from './components/GameBoard';\nimport Keyboard from './components/Keyboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TARGET_WORD = '√ÅR√ÅN';\nconst WORD_LENGTH = TARGET_WORD.length;\nfunction evaluateGuess(guess, target) {\n  const result = [];\n  const guessLetters = guess.split('');\n  const targetLetters = target.split('');\n  const usedIndices = new Set();\n  guessLetters.forEach((letter, i) => {\n    if (letter === targetLetters[i]) {\n      result.push({\n        letter,\n        status: 'correct'\n      });\n      usedIndices.add(i);\n    } else {\n      result.push({\n        letter,\n        status: null\n      });\n    }\n  });\n  result.forEach((entry, i) => {\n    if (entry.status === null) {\n      const index = targetLetters.findIndex((l, idx) => l === entry.letter && !usedIndices.has(idx));\n      if (index !== -1) {\n        entry.status = 'present';\n        usedIndices.add(index);\n      } else {\n        entry.status = 'absent';\n      }\n    }\n  });\n  return result;\n}\nfunction App() {\n  _s();\n  const [guesses, setGuesses] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [darkMode, setDarkMode] = useState(() => {\n    return localStorage.getItem('darkMode') === 'true';\n  });\n  const appRef = useRef(null);\n  useEffect(() => {\n    var _appRef$current;\n    (_appRef$current = appRef.current) === null || _appRef$current === void 0 ? void 0 : _appRef$current.focus();\n  }, []);\n  useEffect(() => {\n    document.body.classList.toggle('dark-mode', darkMode);\n    localStorage.setItem('darkMode', darkMode);\n  }, [darkMode]);\n  const handleSubmitGuess = () => {\n    if (currentGuess.length !== WORD_LENGTH) return;\n    const evaluated = evaluateGuess(currentGuess, TARGET_WORD);\n    setGuesses([...guesses, evaluated]);\n    setCurrentGuess('');\n  };\n  const handleKeyDown = e => {\n    const key = e.key.toUpperCase();\n    if (key === 'ENTER') {\n      handleSubmitGuess();\n    } else if (key === 'BACKSPACE') {\n      setCurrentGuess(currentGuess.slice(0, -1));\n    } else if (/^[A-Z√Å√â√ç√ì√ö]$/.test(key) && currentGuess.length < WORD_LENGTH) {\n      setCurrentGuess(currentGuess + key);\n    }\n  };\n  const handleScreenKeyPress = key => {\n    const upperKey = key.toUpperCase();\n    if (upperKey === 'ENTER') {\n      handleSubmitGuess();\n    } else if (upperKey === 'BACKSPACE') {\n      setCurrentGuess(currentGuess.slice(0, -1));\n    } else if (/^[A-Z√Å√â√ç√ì√ö]$/.test(upperKey) && currentGuess.length < WORD_LENGTH) {\n      setCurrentGuess(currentGuess + upperKey);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    tabIndex: 0,\n    ref: appRef,\n    onKeyDown: handleKeyDown,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Focail\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setDarkMode(!darkMode),\n      children: darkMode ? 'üåû Light Mode' : 'üåô Dark Mode'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n      guesses: guesses,\n      currentGuess: currentGuess,\n      wordLength: WORD_LENGTH\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n      onKeyPress: handleScreenKeyPress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"oeGeY+x0brcudakWYG3cpANo/t0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","GameBoard","Keyboard","jsxDEV","_jsxDEV","TARGET_WORD","WORD_LENGTH","length","evaluateGuess","guess","target","result","guessLetters","split","targetLetters","usedIndices","Set","forEach","letter","i","push","status","add","entry","index","findIndex","l","idx","has","App","_s","guesses","setGuesses","currentGuess","setCurrentGuess","darkMode","setDarkMode","localStorage","getItem","appRef","_appRef$current","current","focus","document","body","classList","toggle","setItem","handleSubmitGuess","evaluated","handleKeyDown","e","key","toUpperCase","slice","test","handleScreenKeyPress","upperKey","className","tabIndex","ref","onKeyDown","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","wordLength","onKeyPress","_c","$RefreshReg$"],"sources":["/Users/niamhwalsh/Documents/GitHub/gaeilge-wordle/src/App.js"],"sourcesContent":["import './index.css';\nimport React, { useState, useEffect, useRef } from 'react';\nimport GameBoard from './components/GameBoard';\nimport Keyboard from './components/Keyboard';\n\nconst TARGET_WORD = '√ÅR√ÅN';\nconst WORD_LENGTH = TARGET_WORD.length;\n\nfunction evaluateGuess(guess, target) {\n  const result = [];\n  const guessLetters = guess.split('');\n  const targetLetters = target.split('');\n  const usedIndices = new Set();\n\n  guessLetters.forEach((letter, i) => {\n    if (letter === targetLetters[i]) {\n      result.push({ letter, status: 'correct' });\n      usedIndices.add(i);\n    } else {\n      result.push({ letter, status: null });\n    }\n  });\n\n  result.forEach((entry, i) => {\n    if (entry.status === null) {\n      const index = targetLetters.findIndex(\n        (l, idx) => l === entry.letter && !usedIndices.has(idx)\n      );\n      if (index !== -1) {\n        entry.status = 'present';\n        usedIndices.add(index);\n      } else {\n        entry.status = 'absent';\n      }\n    }\n  });\n\n  return result;\n}\n\nfunction App() {\n  const [guesses, setGuesses] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [darkMode, setDarkMode] = useState(() => {\n    return localStorage.getItem('darkMode') === 'true';\n  });\n  const appRef = useRef(null);\n\n  useEffect(() => {\n    appRef.current?.focus();\n  }, []);\n\n  useEffect(() => {\n    document.body.classList.toggle('dark-mode', darkMode);\n    localStorage.setItem('darkMode', darkMode);\n  }, [darkMode]);\n\n  const handleSubmitGuess = () => {\n    if (currentGuess.length !== WORD_LENGTH) return;\n\n    const evaluated = evaluateGuess(currentGuess, TARGET_WORD);\n    setGuesses([...guesses, evaluated]);\n    setCurrentGuess('');\n  };\n\n  const handleKeyDown = (e) => {\n    const key = e.key.toUpperCase();\n    if (key === 'ENTER') {\n      handleSubmitGuess();\n    } else if (key === 'BACKSPACE') {\n      setCurrentGuess(currentGuess.slice(0, -1));\n    } else if (/^[A-Z√Å√â√ç√ì√ö]$/.test(key) && currentGuess.length < WORD_LENGTH) {\n      setCurrentGuess(currentGuess + key);\n    }\n  };\n\n  const handleScreenKeyPress = (key) => {\n    const upperKey = key.toUpperCase();\n    if (upperKey === 'ENTER') {\n      handleSubmitGuess();\n    } else if (upperKey === 'BACKSPACE') {\n      setCurrentGuess(currentGuess.slice(0, -1));\n    } else if (/^[A-Z√Å√â√ç√ì√ö]$/.test(upperKey) && currentGuess.length < WORD_LENGTH) {\n      setCurrentGuess(currentGuess + upperKey);\n    }\n  };\n\n  return (\n    <div\n      className=\"app\"\n      tabIndex={0}\n      ref={appRef}\n      onKeyDown={handleKeyDown}\n    >\n      <h1>Focail</h1>\n\n      <button onClick={() => setDarkMode(!darkMode)}>\n        {darkMode ? 'üåû Light Mode' : 'üåô Dark Mode'}\n      </button>\n\n      <GameBoard\n        guesses={guesses}\n        currentGuess={currentGuess}\n        wordLength={WORD_LENGTH}\n      />\n\n      <Keyboard onKeyPress={handleScreenKeyPress} />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}